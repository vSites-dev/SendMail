generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  project     Project?

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

// ================================================================================
// ================================================================================
// ================================================================================

model Project {
  id             String       @id @default(uuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // relations
  campaigns Campaign[]
  contacts  Contact[]
  tasks     Task[]
  domains   Domain[]

  @@map("projects")
}

model Campaign {
  id          String         @id @default(uuid())
  name        String
  subject     String
  body        String
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  tasks    Task[]
  emails   Email[]
  contacts Contact[] // Recipients

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@map("campaigns")
}

model Contact {
  id       String        @id @default(uuid())
  email    String
  name     String?
  metadata Json? // For storing custom fields
  status   ContactStatus @default(SUBSCRIBED)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  campaigns Campaign[] // Campaigns this contact is part of
  emails    Email[]
  tasks     Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, email])
  @@index([projectId])
  @@map("contacts")
}

model Email {
  id String @id @default(uuid())

  messageId String      @unique() // this is coming from SES
  subject   String
  body      String
  status    EmailStatus @default(QUEUED)

  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId String?

  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String

  clicks Click[]

  sentAt    DateTime?
  openedAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([campaignId])
  @@map("emails")
}

model Task {
  id          String     @id @default(uuid())
  type        TaskType
  status      TaskStatus @default(PENDING)
  scheduledAt DateTime
  processedAt DateTime?
  error       String?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId String?

  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  contactId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([scheduledAt, status])
  @@index([projectId])
  @@map("tasks")
}

model Click {
  id String @id @default(uuid())

  link String

  email   Email  @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId String

  createdAt DateTime @default(now())

  @@index([emailId, createdAt])
  @@map("clicks")
}

model Domain {
  id          String       @id @default(uuid())
  name        String       @unique
  status      DomainStatus @default(PENDING)
  dkimTokens  String[]
  projectId   String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([projectId])
  @@map("domains")
}

enum ContactStatus {
  SUBSCRIBED
  UNSUBSCRIBED
  BOUNCED
  COMPLAINED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  FAILED
}

enum EmailStatus {
  QUEUED
  SENT
  DELIVERED
  BOUNCED
  OPENED
  CLICKED
  COMPLAINED
  FAILED
}

enum DomainStatus {
  PENDING
  VERIFIED
  FAILED
  DKIM_PENDING
  DKIM_VERIFIED
  DKIM_FAILED
}

enum TaskType {
  SEND_CAMPAIGN
  SEND_EMAIL
}

enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
